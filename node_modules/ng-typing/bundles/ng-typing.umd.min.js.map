{
  "version": 3,
  "file": "ng-typing.umd.min.js",
  "sources": [
    "ng://ng-typing/out/libs/ng-typing/src/typing.component.ts",
    "ng://ng-typing/out/libs/ng-typing/src/typing.module.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'typing',\r\n  template: `{{displayedChrs}}`\r\n})\r\nexport class TypingComponent implements OnInit {\r\n\r\n  static readonly MAX_TYPO_PROBABILITY: number = 80;\r\n  static readonly TYPO_FIX_SPEED: number = 200;\r\n  static readonly RANDOM_CHARACTERS: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n\r\n  @Input() message: string;\r\n  @Input() referenceSpeed: number = 60; // ms\r\n  @Input() speedDeviation: number = 30; // ms\r\n  @Input() typo: boolean = true;\r\n  @Input() typoProbability: number = 5;\r\n  @Output('onCompleted') onCompleted = new EventEmitter<void>();\r\n\r\n  chrs: string[] = [];\r\n  position: number = 0;\r\n  displayedChrs: string = '';\r\n  progress: boolean = false;\r\n  \r\n  ngOnInit() {\r\n    this.show();\r\n  }\r\n\r\n  show(message?: string) {\r\n    if (message)  {\r\n      this.message = message;\r\n    }\r\n    if (!this.progress && this.message && this.message.trim().length > 0) {\r\n      this.progress = true;\r\n      this.initParameters();\r\n      if (this.referenceSpeed == 0) {\r\n        this.displayedChrs = this.message;\r\n      } else {\r\n        this.chrs = this.message.trim().split('');\r\n        setTimeout(this.displayCharacter.bind(this), this.randomSpeed())\r\n      }\r\n    }\r\n  }\r\n\r\n  private initParameters() {\r\n    this.chrs = [];\r\n    this.position = 0;\r\n    this.displayedChrs = '';\r\n  }\r\n\r\n  private displayCharacter() {\r\n    if (this.doTypo()) {\r\n      this.displayedChrs += this.getRandomCharacter();\r\n      setTimeout(this.correctTypo.bind(this), TypingComponent.TYPO_FIX_SPEED);\r\n    } else {\r\n      this.displayedChrs += this.chrs[this.position++];\r\n      if (this.position == this.chrs.length) {\r\n        this.onCompleted.emit();\r\n        this.progress = false;\r\n      } else {\r\n        setTimeout(this.displayCharacter.bind(this), this.randomSpeed());\r\n      }\r\n    }\r\n  }\r\n\r\n  private getRandomCharacter(): string {\r\n    return TypingComponent.RANDOM_CHARACTERS\r\n      .charAt(Math.floor(Math.random() * TypingComponent.RANDOM_CHARACTERS.length));\r\n  }\r\n\r\n  private correctTypo() {\r\n    this.displayedChrs = this.displayedChrs.slice(0, -1);\r\n    setTimeout(this.displayCharacter.bind(this), this.randomSpeed());\r\n  }\r\n\r\n  private randomSpeed(): number {\r\n    const deviation = Math.floor(Math.random() * Math.floor(this.speedDeviation));\r\n    const direction = Math.round(Math.random()) == 0 ? 1 : -1;\r\n    return this.referenceSpeed + (deviation * direction);\r\n  }\r\n\r\n  private doTypo(): boolean {\r\n    if (this.position > 2 && !!this.typo) {\r\n      this.typoProbability = Math.max(Math.min(TypingComponent.MAX_TYPO_PROBABILITY,\r\n        Math.round(this.typoProbability)), 0);\r\n      return Math.floor(Math.random() * 100) < this.typoProbability;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n",
    "import { NgModule } from '@angular/core';\nimport { TypingComponent } from './typing.component';\n\n@NgModule({\n  declarations: [TypingComponent],\n  exports: [TypingComponent]\n})\nexport class TypingModule { }\n"
  ],
  "names": [
    "TypingComponent",
    "this",
    "speedDeviation",
    "typo",
    "typoProbability",
    "onCompleted",
    "EventEmitter",
    "chrs",
    "position",
    "displayedChrs",
    "progress",
    "show",
    "message",
    "trim",
    "length",
    "initParameters",
    "referenceSpeed",
    "split",
    "setTimeout",
    "displayCharacter",
    "bind",
    "randomSpeed",
    "doTypo",
    "getRandomCharacter",
    "correctTypo",
    "TYPO_FIX_SPEED",
    "emit",
    "RANDOM_CHARACTERS",
    "charAt",
    "Math",
    "floor",
    "random",
    "slice",
    "deviation",
    "direction",
    "round",
    "max",
    "min",
    "MAX_TYPO_PROBABILITY",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "Input",
    "Output",
    "TypingModule",
    "decorators",
    "NgModule",
    "declarations"
  ],
  "mappings": "qQAAA,SAAAA,2BAaAC,KAAAC,eAAoC,GACpCD,KAAAE,MAAA,EACAF,KAAAG,gBAAA,EACAH,KAAAI,YAAA,IAAqCC,EAAAA,aACrCL,KAAAM,QAEAN,KAAAO,SAAA,EACAP,KAAAQ,cAAA,GACAR,KAAAS,UAAA,yCAGAT,KAAAU,qCAIAC,IACQX,KAARW,QAAAA,IAEAX,KAAAS,UAAAT,KAAAW,SAAAX,KAAAW,QAAAC,OAAAC,OAAA,IACQb,KAAKS,UAAb,EACMT,KAAKc,iBACX,GAAUd,KAAVe,eACUf,KAAKQ,cAAfR,KAAoCW,SAEpCX,KAAAM,KAAAN,KAAAW,QAAAC,OAAAI,MAAA,IACQC,WAARjB,KAAwBkB,iBAAxBC,KAA8CnB,MAA9CA,KAAAoB,wDAMApB,KAAAM,QACIN,KAAKO,SAAT,EACIP,KAAKQ,cAAT,4CAIAR,KAAAqB,UACQrB,KAAKQ,eAAbR,KAAAsB,qBACML,WAANjB,KAAAuB,YAAAJ,KAAAnB,MAAAD,EAAAyB,kBAEAxB,KAAAQ,eAAAR,KAAAM,KAAAN,KAAAO,YACUP,KAAVO,UAAAP,KAAgCM,KAAKO,QAC3Bb,KAAKI,YAAYqB,OACnBzB,KAAKS,UAAW,GAExBQ,WAAAjB,KAAAkB,iBAAAC,KAAAnB,MAAAA,KAAAoB,2DAMA,OAAArB,EAAA2B,kBACAC,OAAAC,KAAAC,MAA2BD,KAA3BE,SAAA/B,EAAA2B,kBAAAb,6CAIAb,KAAAQ,cAAAR,KAAAQ,cAAAuB,MAAA,GAAA,GACId,WAAJjB,KAAAkB,iBAAAC,KAAAnB,MAAiDA,KAAKoB,mDAItD,IAAAY,EAAAJ,KAAAC,MAAAD,KAAAE,SAAAF,KAAAC,MAAA7B,KAAAC,iBACAgC,EAAiD,GAAjDL,KAAAM,MAAAN,KAAAE,UAAqD,GAArD,EACI,OAAJ9B,KAAAe,eAAAiB,EAAAC,iCAIA,SAAAjC,KAAAO,SAAA,GAAAP,KAAAE,QACQF,KAAKG,gBAAkByB,KAAKO,IAAIP,KAAxCQ,IAAArC,EAAAsC,qBAAAT,KAAAM,MAAAlC,KAAAG,kBAAA,GACAyB,KAAAC,MAAA,IAAAD,KAA6BE,UAAkB9B,KAA/CG,uBA3EAJ,EAAAsC,qBAAiD,GACjDtC,EAAAyB,eAA2C,IAC3CzB,EAAA2B,kBAA8C,sEAR9CY,KAACC,EAAAA,UAADC,OACEC,SAAU,SACVC,SAAU,gFAQZ/B,UAAA2B,KAAGK,EAAAA,QACH5B,iBAAAuB,KAAGK,EAAAA,QACH1C,iBAAAqC,KAAGK,EAAAA,QACHzC,OAAAoC,KAAGK,EAAAA,QACHxC,kBAAAmC,KAAGK,EAAAA,QACHvC,cAAAkC,KAAGM,EAAAA,OAAHJ,MAAU,0CCjBV,gBAIAK,EAAAC,aACAR,KAAAS,EAAAA,SAAAP,OACAQ,cAAAjD"
}
